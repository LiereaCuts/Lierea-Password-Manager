import sys
import os
import string
import secrets
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QPushButton, QListWidget, QMessageBox,
    QDialog, QDialogButtonBox, QFormLayout
)
from PySide6.QtGui import QFont, QClipboard
from PySide6.QtCore import Qt

# Şifrelerin kaydedileceği dosya adı
PASSWORDS_FILE = "passwords.txt"

class EditDialog(QDialog):
    def __init__(self, current_name, current_password, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Şifreyi Güncelle")
        self.setFixedSize(300, 150)
        
        layout = QFormLayout(self)
        self.name_edit = QLineEdit(current_name)
        self.pass_edit = QLineEdit(current_password)
        layout.addRow("Yeni Şifre Adı:", self.name_edit)
        layout.addRow("Yeni Şifre:", self.pass_edit)
        
        # Onay ve iptal butonları
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)
    
    def get_data(self):
        return self.name_edit.text().strip(), self.pass_edit.text().strip()

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("LiereaCuts")
        self.setFixedSize(500, 650)

        # Merkezi widget ve layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(15)

        # Başlık
        title = QLabel("Lierea Development")
        title_font = QFont("Arial", 20, QFont.Bold)
        title.setFont(title_font)
        title.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title)

        # Şifre adı girişi
        self.name_input = QLineEdit()
        self.name_input.setPlaceholderText("Oluşturulacak şifreye bir isim veriniz...")
        self.name_input.setFixedHeight(35)
        main_layout.addWidget(self.name_input)

        # Şifre oluştur butonu
        self.generate_btn = QPushButton("Şifre Oluştur")
        self.generate_btn.setFixedHeight(40)
        self.generate_btn.clicked.connect(self.generate_password)
        main_layout.addWidget(self.generate_btn)

        # Oluşturulan şifreyi gösteren alan
        self.password_display = QLineEdit()
        self.password_display.setPlaceholderText("Oluşturulan şifre burada görünecek")
        self.password_display.setReadOnly(True)
        self.password_display.setFixedHeight(35)
        main_layout.addWidget(self.password_display)

        # Şifre kopyalama butonu
        self.copy_btn = QPushButton("Verilen Şifreyi Kopyala")
        self.copy_btn.setFixedHeight(40)
        self.copy_btn.clicked.connect(self.copy_password)
        main_layout.addWidget(self.copy_btn)

        # Kayıtlı şifreleri listeleyen alan
        list_title = QLabel("Kayıtlı Şifreler")
        list_title.setFont(QFont("Arial", 14, QFont.Bold))
        main_layout.addWidget(list_title)

        self.password_list = QListWidget()
        main_layout.addWidget(self.password_list)

        # Güncelle ve Sil butonlarını içeren yatay layout
        button_layout = QHBoxLayout()
        self.update_btn = QPushButton("Şifreyi Güncelle")
        self.update_btn.clicked.connect(self.update_password)
        button_layout.addWidget(self.update_btn)
        self.delete_btn = QPushButton("Şifreyi Sil")
        self.delete_btn.clicked.connect(self.delete_password)
        button_layout.addWidget(self.delete_btn)
        main_layout.addLayout(button_layout)

        # Daha profesyonel görünüm için stil ayarları
        self.setStyleSheet("""
            QWidget {
                background-color: #2E003E; /* Koyu mor ton */
                color: #FFFFFF;
                font-family: Arial;
            }
            QLineEdit, QListWidget {
                background-color: #4B0082;
                border: 1px solid #FFFFFF;
                border-radius: 5px;
                padding: 5px;
            }
            QPushButton {
                background-color: #5A00A3;
                border: none;
                border-radius: 5px;
                padding: 10px;
            }
            QPushButton:hover {
                background-color: #7000BF;
            }
        """)

        # Daha önceden kaydedilmiş şifreleri yükle
        self.load_passwords()

    def generate_password(self):
        password_name = self.name_input.text().strip()
        if not password_name:
            QMessageBox.warning(self, "Hata", "Lütfen şifre için bir isim giriniz!")
            return

        # Şifre oluşturma: 12 karakter uzunluğunda, harf, rakam ve sembol karışımı
        alphabet = string.ascii_letters + string.digits + string.punctuation
        password = ''.join(secrets.choice(alphabet) for _ in range(12))

        # Oluşturulan şifreyi göster
        self.password_display.setText(password)

        # Şifreyi dosyaya kaydet
        self.save_password(password_name, password)
        # Listeye ekle
        self.password_list.addItem(f"{password_name} : {password}")

        # Giriş alanını temizle
        self.name_input.clear()

    def copy_password(self):
        password = self.password_display.text()
        if not password:
            QMessageBox.information(self, "Bilgi", "Kopyalanacak şifre bulunmuyor!")
            return

        clipboard: QClipboard = QApplication.clipboard()
        clipboard.setText(password)
        QMessageBox.information(self, "Bilgi", "Şifre kopyalandı!")

    def save_password(self, name: str, password: str):
        try:
            with open(PASSWORDS_FILE, "a", encoding="utf-8") as f:
                f.write(f"{name} : {password}\n")
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Şifre kaydedilirken bir hata oluştu:\n{e}")

    def load_passwords(self):
        if not os.path.exists(PASSWORDS_FILE):
            return

        try:
            with open(PASSWORDS_FILE, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if line:
                        self.password_list.addItem(line)
        except Exception as e:
            QMessageBox.critical(self, "Hata", f"Kaydedilmiş şifreler yüklenirken bir hata oluştu:\n{e}")

    def update_password(self):
        selected_item = self.password_list.currentItem()
        if not selected_item:
            QMessageBox.warning(self, "Uyarı", "Lütfen güncellemek için bir şifre seçiniz!")
            return
        old_text = selected_item.text()  # Format: "isim : şifre"
        try:
            old_name, old_pass = old_text.split(" : ", 1)
        except Exception:
            QMessageBox.critical(self, "Hata", "Seçilen şifre kaydı geçerli formatta değil!")
            return

        # Güncelleme diyalogunu aç
        dialog = EditDialog(old_name, old_pass, self)
        if dialog.exec() == QDialog.Accepted:
            new_name, new_pass = dialog.get_data()
            if not new_name or not new_pass:
                QMessageBox.warning(self, "Uyarı", "Yeni şifre isimi boş bırakılamaz!")
                return
            new_text = f"{new_name} : {new_pass}"
            # Listede güncelle
            selected_item.setText(new_text)
            # Dosyayı güncelle: Eski satırı yeni satır ile değiştir
            try:
                with open(PASSWORDS_FILE, "r", encoding="utf-8") as f:
                    lines = f.readlines()
                with open(PASSWORDS_FILE, "w", encoding="utf-8") as f:
                    for line in lines:
                        if line.strip() == old_text:
                            f.write(new_text + "\n")
                        else:
                            f.write(line)
                QMessageBox.information(self, "Bilgi", "Şifre güncellendi!")
            except Exception as e:
                QMessageBox.critical(self, "Hata", f"Dosya güncellenirken hata oluştu:\n{e}")

    def delete_password(self):
        selected_item = self.password_list.currentItem()
        if not selected_item:
            QMessageBox.warning(self, "Uyarı", "Lütfen silmek için bir şifre seçiniz!")
            return
        reply = QMessageBox.question(
            self, "Onay",
            "Seçili şifreyi silmek istediğinize emin misiniz?",
            QMessageBox.Yes | QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            item_text = selected_item.text()
            # Listeden kaldır
            row = self.password_list.row(selected_item)
            self.password_list.takeItem(row)
            # Dosyayı güncelle: Silinen kaydı çıkar
            try:
                with open(PASSWORDS_FILE, "r", encoding="utf-8") as f:
                    lines = f.readlines()
                with open(PASSWORDS_FILE, "w", encoding="utf-8") as f:
                    for line in lines:
                        if line.strip() != item_text:
                            f.write(line)
                QMessageBox.information(self, "Bilgi", "Şifre silindi!")
            except Exception as e:
                QMessageBox.critical(self, "Hata", f"Dosya güncellenirken hata oluştu:\n{e}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
